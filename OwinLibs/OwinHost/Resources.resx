<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ProgramOutput_CommandLineError" xml:space="preserve">
    <value>Command line error - {0}</value>
  </data>
  <data name="ProgramOutput_Usage" xml:space="preserve">
    <value>Usage:</value>
  </data>
  <data name="ProgramOutput_Intro" xml:space="preserve">
    <value>Runs a web application on an http server</value>
  </data>
  <data name="ProgramOutput_UsageTemplate" xml:space="preserve">
    <value>OwinHost [options] [&lt;application&gt;]</value>
  </data>
  <data name="ProgramOutput_Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="ProgramOutput_EnvironmentVariablesHeader" xml:space="preserve">
    <value>Environment Variables:</value>
  </data>
  <data name="ProgramOutput_Example" xml:space="preserve">
    <value>Example: OwinHost --port 5000 HelloWorld.Startup</value>
  </data>
  <data name="ProgramOutput_PortEnvironmentDescription" xml:space="preserve">
    <value>Changes the default TCP port to listen on when the --port and --url options are not provided.</value>
  </data>
  <data name="ProgramOutput_ServerEnvironmentDescription" xml:space="preserve">
    <value>Changes the default server factory TYPE to use when the --server option is not provided.</value>
  </data>
  <data name="ProgramOutput_ServerOption" xml:space="preserve">
    <value>Load the specified server factory TYPE or assembly. The default is 'Microsoft.Owin.Host.HttpListener'.</value>
  </data>
  <data name="ProgramOutput_UriOption" xml:space="preserve">
    <value>Which uri prefix to listen on. This option may be used multiple times. Format is '&lt;scheme&gt;://&lt;host&gt;[:&lt;port&gt;]&lt;path&gt;/'.</value>
  </data>
  <data name="ProgramOutput_PortOption" xml:space="preserve">
    <value>Which localhost TCP port to listen on if --url is not provided. The default is http://localhost:5000/.</value>
  </data>
  <data name="ProgramOutput_DirectoryOption" xml:space="preserve">
    <value>Specifies the target directory of the application.</value>
  </data>
  <data name="ProgramOutput_OutputOption" xml:space="preserve">
    <value>Writes any trace data to the given FILE. Default is stderr.</value>
  </data>
  <data name="ProgramOutput_SettingsOption" xml:space="preserve">
    <value>The settings file that contains service and setting overrides. This should consist of one name=value pair per line, with empty lines and lines starting with '#' ignored. Additional settings will be loaded from the AppSettings section of the app's config file.</value>
  </data>
  <data name="ProgramOutput_BootOption" xml:space="preserve">
    <value>Loads an assembly to provide custom startup control.</value>
  </data>
  <data name="ProgramOutput_PressCtrlCToTerminate" xml:space="preserve">
    <value>Press ctrl+c again to terminate</value>
  </data>
  <data name="ProgramOutput_SimpleErrorMessage" xml:space="preserve">
    <value>Error:  {0}{1}  {2}</value>
  </data>
  <data name="CommandException_UnexpectedCommandLineArgument" xml:space="preserve">
    <value>Unexpected command line argument '{0}'</value>
  </data>
  <data name="CommandException_UnknownSwitchType" xml:space="preserve">
    <value>Unknown switch type</value>
  </data>
  <data name="ProgramOutput_AppStartupDescription" xml:space="preserve">
    <value>The format is "Namespace.TypeName[.MethodName][,Assembly]", where MethodName and Assembly are optional. If no AppStartup value is provided then it searches for an assembly with an OwinStartupAttribute.</value>
  </data>
  <data name="ProgramOutput_AppStartupParameter" xml:space="preserve">
    <value>Names a specific application entry point.</value>
  </data>
  <data name="ProgramOutput_ParametersHeader" xml:space="preserve">
    <value>Parameters:</value>
  </data>
</root>